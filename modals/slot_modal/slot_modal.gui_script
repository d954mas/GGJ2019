local COMMON = require "libs.common"
local SM = require "Jester.jester"
local WORLD = require "world.world"
local GUI = require "gui.gui"
local TEXT_SETTINGS = require "world.text_settings"
local RichText = require "richtext.richtext"

---@class SelfSlotModalGui

local function set_richtext(self,name, settings, text)
	name = "richtext_" .. name
	if self[name] then
		for _,w in ipairs(self[name]) do
			gui.delete_node(w.node)
		end
	end
	self[name] = RichText.create(text,"Roboto", settings)
end

---@param self SelfSlotModalGui
function init(self)
	gui.set_render_order(2)
	self.title = gui.get_node("lbl_name")
	self.root = gui.get_node("root")
	self.building = WORLD.buildings[COMMON.GLOBAL.slot]
	gui.set_text(self.title,WORLD.locale["BUILDING_" ..  COMMON.GLOBAL.slot])
	gui.set_scale(self.root,vmath.vector3(0))
	gui.animate(self.root,gui.PROP_SCALE,vmath.vector3(1),gui.EASING_INSINE,0.5,0,function ()
		COMMON.INPUT.acquire()
	end)

	self.description_settings = TEXT_SETTINGS.base_center({parent = gui.get_node("description_lbl"),color = vmath.vector3(1)})

	self.hp_bar = GUI.ProgressBar({ root = gui.get_node("hp_bar/bar"), background = gui.get_node("hp_bar/background"),
									label = gui.get_node("hp_bar/lbl") })
	self.hp_bar:set_max_value(1)
	self.time_bar = GUI.ProgressBar({ root = gui.get_node("time_bar/bar"), background = gui.get_node("time_bar/background"),
									label = gui.get_node("time_bar/lbl") })
	self.time_bar:set_max_value(1)
	self.exp_bar = GUI.ProgressBar({ root = gui.get_node("exp_bar/bar"), background = gui.get_node("exp_bar/background"),
									label = gui.get_node("exp_bar/lbl") })
	self.exp_bar:set_max_value(1)
	COMMON.GLOBAL.M3_SCALE = vmath.vector3(0)

end
---@param self SelfSlotModalGui
function final(self)
	COMMON.INPUT.release()
end
---@param self SelfSlotModalGui
function update(self, dt)
	self.hp_bar:set_progress(self.building.e.hp)
	self.time_bar:set_progress(self.building.e.time/self.building.e.total_time)
	self.exp_bar:set_progress(self.building:get_next_exp() == -1 and 1 or self.building.exp/self.building:get_next_exp())
	COMMON.GLOBAL.M3_SCALE = gui.get_scale(self.root)
	set_richtext(self,"description",self.description_settings,self.building:get_description())
end
---@param self SelfSlotModalGui
function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end
---@param self SelfSlotModalGui
function on_input(self, action_id, action)
	if action_id == COMMON.HASHES.INPUT_TOUCH and action.pressed then
		if gui.pick_node(gui.get_node("cross"),action.x, action.y) then
			gui.animate(self.root,gui.PROP_SCALE,vmath.vector3(0),gui.EASING_INSINE,0.5,0,function ()
				--COMMON.INPUT.acquire()
				gui.set_scale(self.root,vmath.vector3(0))
				COMMON.GLOBAL.M3_SCALE = vmath.vector3(0)
				SM.back()
			end)
		elseif gui.pick_node(gui.get_node("vopros"),action.x, action.y) then
			COMMON.GLOBAL.M3_HELP = true
			COMMON.GLOBAL.M3_NEED_RESTART = true
			local l = WORLD.locale
			local dialog = {
				{text = l.M3_HELP_TEXT, name = l.NAME_AI,a1 = {text = l.M3_HELP_A1}}
			}
			SM.show("TextModal",{dialog = dialog},{popup = false})
		end
	end
end
---@param self SelfSlotModalGui
function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
